c- constants -----------------------------------------------------------

! #define tSTATSTART uparam(1) /* start time for averaging */
! #define tSTATFREQ  uparam(2) /* output frequency for statistics */

c data extraction along wall normal direction
! #define INTP_NMAX 200 /* number of sample points */
! #define XCINT 1.0     /* x coordinate of 1D line*/
! #define ZCINT 1.0     /* z coordinate of 1D line */

c mesh dimensions
! #define BETAM 2.4     /* wall normal stretching parameter */
! #define PI (4.*atan(1.))
! #define XLEN (2.*PI)
! #define ZLEN PI
! #define NUMBER_ELEMENTS_X 16
! #define NUMBER_ELEMENTS_Y 12
! #define NUMBER_ELEMENTS_Z 8

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e

      utrans = 1.
      udiff  = param(2)

      if (ifield .eq. 2) then
         e = gllel(ieg)
         udiff = param(8)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0 
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'SOLN'
      include 'INPUT'
      include 'TSTEP'
!      include 'TOTAL'
      include 'MASS'

      include 'F3D'
      include 'TSTEPPERD'
      include 'ARN_ARPD'        ! arna_ifpr

      include 'TEST'

      integer i,j

      integer igeom

      real w1r,w2r,w3r
      common /scruz/ w1r(lx1,ly1,lz1,lelv)
     $ ,             w2r(lx1,ly1,lz1,lelv)
     $ ,             w3r(lx1,ly1,lz1,lelv)

      real w1i,w2i,w3i
      common /scruz2/ w1i(lx1,ly1,lz1,lelv)
     $ ,              w2i(lx1,ly1,lz1,lelv)
     $ ,              w3i(lx1,ly1,lz1,lelv)

      integer jpr,jpi

!     Real Variables      
      real erxt,errt,erxx,erxr,errr,ertt
      common /ctmp0/ erxt(lx1*ly1*lz1*lelt)      ! Er_x\theta
     $             , errt(lx1*ly1*lz1*lelt)      ! Er_Rt
      common /ctmp1/ erxx(lx1*ly1*lz1*lelt)      ! Er_xx
     $             , erxr(lx1*ly1*lz1*lelt)      ! Er_xR
     $             , errr(lx1*ly1*lz1*lelt)      ! Er_RR
     $             , ertt(lx1*ly1*lz1*lelt)      ! Er_\theta\theta

!     Made a new scratch array here.      
!     Imaginary Variables
      real eixt,eirt,eixx,eixr,eirr,eitt,wk3
      common /scrns/   eixt(lx1*ly1*lz1*lelt)      ! Ei_x\theta
     $               , eirt(lx1*ly1*lz1*lelt)      ! Ei_Rt
     $               , eixx(lx1*ly1*lz1*lelt)      ! Ei_xx
     $               , eixr(lx1*ly1*lz1*lelt)      ! Ei_xR
     $               , eirr(lx1*ly1*lz1*lelt)      ! Ei_RR
     $               , eitt(lx1*ly1*lz1*lelt)      ! Ei_\theta\theta
     $               , wk3(lx1*ly1*lz1*lelt)       ! work

      real glmax

      integer nt1,nt2
      real innr,inni

      if (istep.eq.0) then
        call frame_start
      endif  

      call frame_monitor

!      call slp_mark_faces()

!      ifaxis = .false.
      ifto = .true.

      nt1 = lx1*ly1*lz1*nelv
      nt2 = lx2*ly2*lz2*lelv

      call rzero3(vxp(1,1),vyp(1,1),vzp(1,1),nt1)
      call rzero3(vxp(1,2),vyp(1,2),vzp(1,2),nt1)

      call rone(vzp(1,1),nt1)
      call opdiv_f3d(pr,vxp,vyp,vzp)
      call invcol2(pr,bm2,nt2)

      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),pr,vzp(1,1),'div')
      call rone(pr,nt2)
      call opgradt_f3d(vxp,vyp,vzp,pr)
      call invcol2(vxp,bm1,nt1)
      call invcol2(vyp,bm1,nt1)
      call invcol2(vzp,bm1,nt1)
      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),pr,vzp(1,1),'div')

      call initp_f3d

      ifield = 1
      jp = 1

      do i=1,nt2
        prp(i,1) = cos(xm2(i,1,1,1))
        prp(i,2) = sin(xm2(i,1,1,1))
      enddo  

      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),vzp(1,1),'  ')
      call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),vzp(1,2),'  ')

      tst_istep = tst_step - 1
      istep = 1

      call tst_solve()

      call copy3(tmp1,tmp2,tmp3,vxp,vyp,vzp,nt1)
      call copy(tmp4,prp,nt2)
      call copy3(tmp5,tmp6,tmp7,vxp(1,2),vyp(1,2),vzp(1,2),nt1)
      call copy(tmp8,prp(1,2),nt2)

      write(6,*) 'IDO', idoarp

      do i=1,nt1
        vxp(i,1) = cos(xm1(i,1,1,1))*vxp(i,1)
        vxp(i,2) = sin(xm1(i,1,1,1))*vxp(i,2)

        vyp(i,1) = cos(xm1(i,1,1,1))*vyp(i,1)
        vyp(i,2) = sin(xm1(i,1,1,1))*vyp(i,2)

        vzp(i,1) = cos(xm1(i,1,1,1))*vzp(i,1)
        vzp(i,2) = sin(xm1(i,1,1,1))*vzp(i,2)
      enddo  
      do i=1,nt2
        prp(i,1) = cos(xm2(i,1,1,1))*prp(i,1)
        prp(i,2) = sin(xm2(i,1,1,1))*prp(i,2)
      enddo  

!     Inner product
      innr = 0.
      inni = 0.
      call opglsc2_wt_comp(innr,inni,tmp1,tmp2,tmp3,
     $                     tmp5,tmp6,tmp7,vxp(1,1),vyp(1,1),vzp(1,1),
     $                     vxp(1,2),vyp(1,2),vzp(1,2),BM1,nt1)

     

      tst_istep = tst_step - 1
      istep = 1

!      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),vzp(1,1),'  ')
!      call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),vzp(1,2),'  ')

      call tst_solve()

      write(6,*) 'Inner', innr,inni
      write(6,*) 'Inner 1', workla(ipntarp(5))

 
      istep = 1
      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),vzp(1,1),'  ')
      call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),vzp(1,2),'  ')


      do i=1,nt1
        vxp(i,1) = cos(xm1(i,1,1,1))*vxp(i,1)
        vxp(i,2) = sin(xm1(i,1,1,1))*vxp(i,2)

        vyp(i,1) = cos(xm1(i,1,1,1))*vyp(i,1)
        vyp(i,2) = sin(xm1(i,1,1,1))*vyp(i,2)

        vzp(i,1) = cos(xm1(i,1,1,1))*vzp(i,1)
        vzp(i,2) = sin(xm1(i,1,1,1))*vzp(i,2)
      enddo  
      do i=1,nt2
        prp(i,1) = cos(xm2(i,1,1,1))*prp(i,1)
        prp(i,2) = sin(xm2(i,1,1,1))*prp(i,2)
      enddo  

      tst_istep = tst_step - 1
      istep = 2

      call tst_solve()

      istep = 2
      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),vzp(1,1),'  ')
      call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),vzp(1,2),'  ')


      call check_vbasea(3)

      call exitt

      call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),vzp(1,1),'  ')
      call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),vzp(1,2),'  ')


      if (istep.eq.nsteps.or.lastep.eq.1) then
        call frame_end
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux = 0.0
      uy = 0.0
      uz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'INPUT'         ! if3d
      include 'PARALLEL'
!      include 'TOTAL'
      include 'NEKUSE'

      include 'F3D'

      integer ix,iy,iz,ieg
      real pi

      integer jp
      common /ppointr/ jp

      real fcoeff(3)
      real xl(3)
      real mth_ran_dst

      pi = 4.0*atan(1.0)

      if (jp.eq.0) then
        ux = 0.0 + 0.0*y
        uy = 0.
        uz = 1.0 + 0.0*y
      else
        ux = 0.0 + (1.0e-0)*sin(x)*sin(2*pi*(y-1.0)/3)
        uy = 0.0 + (2.0e-1)*sin(2*pi*(y-1.0)/3)*sin(jp + x + y)
!        uz = -1.0 + (2.0e-0)*rand()
        uz = ux*sin(jp + x*y+0.)

!!       perturbation; white noise
!        xl(1) = X
!        xl(2) = Y
!        if (IF3D.or.iff3d) xl(3) = Y+X
!        
!        if (jp.eq.1) then
!          fcoeff(1)=  3.0e4
!          fcoeff(2)= -1.5e3
!          fcoeff(3)=  0.5e5
!        else
!          fcoeff(1)=  9.0e4
!          fcoeff(2)=  1.5e3
!          fcoeff(3)= -2.5e5
!        endif          
!        ux=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
!        if (jp.eq.1) then
!          fcoeff(1)=  2.3e4
!          fcoeff(2)=  2.3e3
!          fcoeff(3)= -2.0e5
!        else
!          fcoeff(1)=  1.3e4
!          fcoeff(2)= -5.8e3
!          fcoeff(3)= -1.9e5
!        endif
!        uy=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
!        if (IF3D.or.iff3d) then
!           if (jp.eq.1) then           
!             fcoeff(1)= 2.e4
!             fcoeff(2)= 1.e3
!             fcoeff(3)= 1.e5
!           else
!             fcoeff(1)= -1.9e4
!             fcoeff(2)= -8.0e3
!             fcoeff(3)=  3.2e5
!           endif 
!           uz=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
!        else
!           uz = 0.0
!        endif
!!        ux = cos(x)
!!        uy = sin(y)
!!      
!!        if (jp.eq.1) then
!!          uz = 1.0/k_3dsp*(sin(x) - cos(y))
!!        elseif (jp.eq.2) then
!!          uz = 1.0/k_3dsp*(-sin(x) + cos(y))
!!        endif

      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices

      implicit none  
  
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'INPUT'
      include 'GEOM'
      include 'TSTEP'
!      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      integer n,i,j
      real alpha,alphai

!      ifaxis = .true.   ! just for initialization
      param(42)=1       ! 0: GMRES (nonsymmetric), 1: PCG w/o weights
      param(43)=1       ! 0: Additive multilevel (param 42=0), 1: Original 2 level
      param(44)=0       ! 0: E based Schwartz, 1: A based Schwartz

      n = nelv * 2**ldim
!      xmin = glmin(xc,n)
!      xmax = glmax(xc,n)
!      ymin = glmin(yc,n)
!      ymax = glmax(yc,n)
!      zmin = glmin(zc,n)
!      zmax = glmax(zc,n)
!
!      xscale = XLEN/(xmax-xmin)
!      yscale = 1./(ymax-ymin)
!      zscale = ZLEN/(zmax-zmin)

      pi = 4.*atan(1.0)

      if (abs(uparam(3)).gt.1.0e-12) then
        alpha  = abs(1.0/uparam(3))
        alphai = abs(uparam(3))
      else
        alpha  = 1.0
        alphai = 1.0
      endif

      if (nio.eq.0) write(6,*) 'Alpha:', alpha, alphai 

      do j=1,nelv
      do i=1,2**ldim
         xc(i,j) = 2.0*(xc(i,j))
!         yc(i,j) = yc(i,j) + 1.0
!         yc(i,1) = tanh(BETAM*(2*yc(i,1)-1))/tanh(BETAM)
!         zc(i,1) = zscale*zc(i,1)
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates


      include 'SIZE'
      include 'TOTAL'


!      call outpost(vx,vy,vz,pr,t,'   ')

!      do iel=1,nelt
!      do ifc=1,2*ndim
!         if (cbc(ifc,iel,1) .eq. 'W  ') boundaryID(ifc,iel) = 1 
!         cbc(ifc,iel,2) = cbc(ifc,iel,1) 
!         if (cbc(ifc,iel,1) .eq. 'W  ') cbc(ifc,iel,2) = 't  '
!      enddo
!      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

!      param(54) = -1  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z) 
!      param(55) = 1.0 ! flowrate/bulk-velocity 

      return
      end
c-----------------------------------------------------------------------
!=======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'

!     register modules
      call io_register
      call chkpt_register
      call frame_register_f3d
      call tst_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'

!     initialise modules
      call chkpt_init
      call frame_get_param_f3d
      call tst_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'

      
      return
      end subroutine

!-----------------------------------------------------------------------

      subroutine check_vbasea(nvec)

      implicit none

      include 'SIZE'
      include 'ARN_ARPD'
      include 'TSTEPPERD'
      include 'F3D'
      include 'TSTEP'
      include 'SOLN'
      include 'INPUT'

      integer i,j
      integer nvec   ! no of vectors to output


      do j=1,nvec
        if (arna_ifcomplex) then
          i = 1
          call copytoreal(vxp(1,1),vxp(1,2),vbasea(i,j),tst_nv)
          i = i+tst_nv
          call copytoreal(vyp(1,1),vyp(1,2),vbasea(i,j),tst_nv)
          i = i+tst_nv
          if (iff3d) then 
            call copytoreal(vzp(1,1),vzp(1,2),vbasea(i,j),tst_nv)
            i = i+tst_nv
          endif
          if (arna_ifpr) then 
            call copytoreal(prp(1,1),prp(1,2),vbasea(i,j),tst_np)
            i = i+tst_np
          endif
          if (ifheat) then
            call copytoreal(tp(1,1,1),tp(1,1,2),vbasea(i,j),tst_nt)
            i = i+tst_nt
          endif
          istep = j
          ifto = .true.
          call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),
     $                vzp(1,1),'vba')
          call outpost(vxp(1,2),vyp(1,2),vzp(1,2),prp(1,2),
     $                vzp(1,2),'vba')
        else  
          ! velocity
          i = 1
          call copy(VXP,vbasea(i,j),tst_nv)
          i = i + tst_nv
          call copy(VYP,vbasea(i,j),tst_nv)
          i = i + tst_nv
          if (IF3D.or.iff3d) then 
            call copy(VZP,vbasea(i,j),tst_nv)
            i = i + tst_nv
          endif
!         Pressure 
          if (arna_ifpr) then
            call copy(prp,vbasea(i,j),tst_np)
            i = i + tst_np
          endif  
!         Temperature
          if (IFHEAT) then
            call copy(TP,vbasea(i,j),tst_nt)
            i = i + tst_nt
          endif
          istep = j 
          ifto = .true.
          call outpost(vxp(1,1),vyp(1,1),vzp(1,1),prp(1,1),
     $                vzp(1,1),'vba')
        endif          ! arna_ifcomplex
      enddo        


      call exitt

      return
      end subroutine check_vbasea
!---------------------------------------------------------------------- 

      subroutine workdatofld

      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'
      include 'TSTEPPERD'
      include 'ARN_ARPD'

      include 'F3D'

      integer i


!     move renormed data back to nekton
      if (arna_ifcomplex) then
        i = ipntarp(1)
        call copytoreal(vxp(1,1),vxp(1,2),workda(i),tst_nv)
        i = i+tst_nv
        call copytoreal(vyp(1,1),vyp(1,2),workda(i),tst_nv)
        i = i+tst_nv
        if (iff3d) then 
          call copytoreal(vzp(1,1),vzp(1,2),workda(i),tst_nv)
          i = i+tst_nv
        endif
        if (arna_ifpr) then 
          call copytoreal(prp(1,1),prp(1,2),workda(i),tst_np)
          i = i+tst_np
        endif
        if (ifheat) then
          call copytoreal(tp(1,1,1),tp(1,1,2),workda(i),tst_nt)
          i = i+tst_nt
        endif  
      else  
        ! velocity
        i = ipntarp(1)
        call copy(VXP,workda(i),tst_nv)
        i = i + tst_nv
        call copy(VYP,workda(i),tst_nv)
        i = i + tst_nv
        if (IF3D.or.iff3d) then 
          call copy(VZP,workda(i),tst_nv)
          i = i + tst_nv
        endif
!       Pressure 
        if (arna_ifpr) then
          call copy(prp,workda(i),tst_np)
          i = i + tst_np
        endif  
!       Temperature
        if (IFHEAT) then
          call copy(TP,workda(i),tst_nt)
          i = i + tst_nt
        endif  

!       make sure the velocity and temperature fields are continuous at
!       element faces and edges
      endif          ! arna_ifcomplex


      return
      end subroutine workdatofld
!---------------------------------------------------------------------- 

      subroutine fldtoworkda

      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'
      include 'TSTEPPERD'
      include 'ARN_ARPD'

      include 'F3D'

      integer i

      if (arna_ifcomplex) then
        i = ipntarp(2)
        call copytocomplex(workda(i),vxp(1,1),vxp(1,2),tst_nv)
        call col2_cr(workda(i),v1mask,tst_nv)
        i = i + tst_nv
        call copytocomplex(workda(i),vyp(1,1),vyp(1,2),tst_nv)
        call col2_cr(workda(i),v2mask,tst_nv)
        i = i + tst_nv
        if (iff3d) then
          call copytocomplex(workda(i),vzp(1,1),vzp(1,2),tst_nv)
          call col2_cr(workda(i),v3mask,tst_nv)
          i = i + tst_nv
        endif
        if (arna_ifpr) then
          call copytocomplex(workda(i),prp(1,1),prp(1,2),tst_np)
          i = i + tst_np
        endif
        if (ifheat) then
          call copytocomplex(workda(i),tp(1,1,1),tp(1,1,2),tst_nt)
          call col2_cr(workda(i),tmask,tst_nt)
          i = i + tst_nt
        endif
      else
        i = ipntarp(2) 
        call col3(workda(i),VXP,V1MASK,tst_nv)
        i = i + tst_nv
        call col3(workda(i),VYP,V2MASK,tst_nv)
        i = i + tst_nv
        if (IF3D.or.iff3d) then
          call col3(workda(i),VZP,V3MASK,tst_nv)
          i = i + tst_nv
        endif
!       pressure
        if (arna_ifpr) then
          call copy(workda(i),prp,tst_np)        
          i = i + tst_np
        endif  
!       temperature
        if (IFHEAT) then
          call col3(workda(i),TP,TMASK,tst_nt)
          i = i + tst_nt
        endif  
        ! this may be not necessary, but ARPACK manual is not clear about it
        !call col3(workda(ipntarp(1)),VXP,BM1,tst_nv)
        !call col3(workda(ipntarp(1)+tst_nv),VYP,BM1,tst_nv)
        !if (IF3D) call col3(workda(ipntarp(1)+2*tst_nv),VZP,BM1,tst_nv)
      endif       ! arna_ifcomplex 


      return
      end subroutine fldtoworkda
!---------------------------------------------------------------------- 





