c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e

      utrans = 1.
      udiff  = param(2)

      if (ifield .eq. 2) then
         e = gllel(ieg)
         udiff = param(8)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      implicit none        
  
      include 'SIZE'
      include 'NEKUSE'

      integer ix,iy,iz,ieg

      if (ndim.eq.2) then
        ffx = 0.01
        ffy = 0.0
        ffz = 0.0
      else
        ffx = 0.01
        ffy = 0.0
        ffz = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'SOLN'
      include 'MVGEOM'
      include 'INPUT'
      include 'TSTEP'
      include 'MASS'

      include 'F3D'
      include 'FS_ALE'

      integer i,j

      integer igeom
      character cb*3
      integer ie,iface,nfaces


      if (istep.eq.0) then

        call frame_start
            
        call gen_mapping_mvb
        call fs_gen_damping
       
      endif  

      call frame_monitor

      ifto = .true.

      if (fs_iffs) call fs_mvmesh()

      if (istep.eq.nsteps.or.lastep.eq.1) then
        call frame_end
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'
      include 'GEOM'

      integer ix,iy,iz,iside,ieg
      real pi

      integer jp
      common /ppointr/ jp

      real rmid

      real glmin,glmax
      integer n

      real rad1,rad2,omega1,omega2
      real a1,a2
      common /cylindrical/ rad1,rad2,omega1,omega2,a1,a2

      if (jp.eq.0) then
        ux   = 0.0
        uy   = 0.0
        uz   = 0.0

        rmid = (rad1+rad2)/2
        if (ndim.eq.3) then
          if (z.lt.(rmid)) ux = 0.0
        else
          if (y.lt.(rmid)) uz = 0.0
        endif       
      else
        ux   = 0.0
        uy   = 0.0
        uz   = 0.0
        temp = 0.0
      endif  

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'INPUT'         ! if3d
      include 'PARALLEL'
      include 'NEKUSE'
      include 'GEOM'

      include 'F3D'

      integer ix,iy,iz,ieg
      real pi

      integer jp
      common /ppointr/ jp

      real fcoeff(3)
      real xl(3)
      real mth_ran_dst

      logical ifcouette
      logical ifpoiseuille
      logical iftaylor
      logical iftestmvb

      real rad1,rad2,omega1,omega2
      real a1,a2
      common /cylindrical/ rad1,rad2,omega1,omega2,a1,a2

      real rmid,y0,z0
      real rad

      ifcouette         = .false.
      ifpoiseuille      = .false.
      iftaylor          = .false.
      iftestmvb         = .false.

      pi = 4.0*atan(1.0)


      if (jp.eq.0) then

        if (ifpoiseuille) then
          ux = 1.0 - y**2
          uy = 0.
          uz = 0.0 + 0.0
        elseif (ifcouette) then
          ux = 0.0 + 1.0*y
          uy = 0.
          uz = 0.0 + 0.0
        elseif (iftaylor) then
          ux = 0.0 + 0.0
          uy = 0.
          uz = a1*y + a2/y
!         Testing  
          temp = 0.01*(a2*y + a1/y)   ! just testing
          ux   = temp
          uy   = temp
        elseif (iftestmvb) then
          rmid = (rad1+rad2)/2.0
          ux   = -uparam(1)*exp(-((y-rmid)/0.25)**2)
          uy   = -0.1*uparam(1)*exp(-((y-rmid)/0.25)**2)
          uz   = 0.1*(a1*y + a2/y)
        elseif (if3d) then
          rad  = sqrt(x**2 + y**2)
          ux   = 0.0
          uy   = 0.0
          uz   = (a1*rad + a2/rad)
        endif  
      else

!       perturbation; white noise
        xl(1) = X
        xl(2) = Y
        if (IF3D.or.iff3d) xl(3) = Y+X
        
        if (jp.eq.1) then
          fcoeff(1)=  3.0e4
          fcoeff(2)= -1.5e3
          fcoeff(3)=  0.5e5
        else
          fcoeff(1)=  9.0e4
          fcoeff(2)=  1.5e3
          fcoeff(3)= -2.5e5
        endif          
        ux=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
        if (jp.eq.1) then
          fcoeff(1)=  2.3e4
          fcoeff(2)=  2.3e3
          fcoeff(3)= -2.0e5
        else
          fcoeff(1)=  1.3e4
          fcoeff(2)= -5.8e3
          fcoeff(3)= -1.9e5
        endif
        uy=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
        if (IF3D.or.iff3d) then
           if (jp.eq.1) then           
             fcoeff(1)= 2.e4
             fcoeff(2)= 1.e3
             fcoeff(3)= 1.e5
           else
             fcoeff(1)= -1.9e4
             fcoeff(2)= -8.0e3
             fcoeff(3)=  3.2e5
           endif 
           uz=UPARAM(1)*mth_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
        else
           uz = 0.0
        endif

      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices

      implicit none  
  
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'INPUT'
      include 'GEOM'
      include 'TSTEP'
      include 'PARALLEL'
!      include 'TOTAL'     ! guarantees GLL mapping of mesh.

!      ifaxis = .true.   ! just for initialization
      param(42)=0       ! 0: GMRES (nonsymmetric), 1: PCG w/o weights
      param(43)=1       ! 0: Additive multilevel (param 42=0), 1: Original 2 level
      param(44)=0       ! 0: E based Schwartz, 1: A based Schwartz



      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates

      implicit none

      include 'SIZE'
      include 'INPUT'      ! cbc
      include 'PARALLEL'

      integer iel,ifc


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      implicit none        

      include 'SIZE'
      include 'SOLN'    ! tmult
      include 'INPUT'
      include 'GEOM'

      integer i,n
      real rad1,rad2,omega1,omega2
      real a1,a2
      common /cylindrical/ rad1,rad2,omega1,omega2,a1,a2

      real x,y,z

      real radius
      common /scrcg/ radius(lx1,ly1,lz1,lelt)

      real glmin,glmax

      n = lx1*ly1*lz1*nelv
      if (if3d) then
        do i=1,n
          y               = ym1(i,1,1,1)
          z               = zm1(i,1,1,1)
          radius(i,1,1,1) = sqrt(y**2 + z**2)
        enddo  
        rad1            = glmin(radius,n)
        rad2            = glmax(radius,n)
      else
        rad1 = glmin(ym1,n)
        rad2 = glmax(ym1,n)
      endif        
      omega1 = 1.0/rad1
      omega2 = 0.0
      a1 = (omega2*(rad2**2) - omega1*rad1*rad1)/(rad2**2 - rad1**2)
      a2 = (omega1 - omega2)*(rad1**2)*(rad2**2)/(rad2**2 - rad1**2)

      if (nio.eq.0) write(6,*) 'Cylindrical Params:', rad1,rad2,a1,a2

      return
      end
c-----------------------------------------------------------------------
!=======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'

!     register modules
      call io_register
      call chkpt_register
      call frame_register_f3d
      call frame_register_fs
!      call tst_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'

!     initialise modules
      call chkpt_init
      call frame_get_param_f3d
      call frame_get_param_fs
!      call tst_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'

      
      return
      end subroutine

!-----------------------------------------------------------------------

c-----------------------------------------------------------------------

